
import { Navigate, useLocation } from 'react-router-dom';
import { usePageVisibility } from '@/hooks/usePageVisibility';
import { useAuth } from '@/contexts/AuthContext';
import { usePermissions } from '@/hooks/usePermissions';
import Loader from '@/components/ui/loader';
import { useEffect, useState } from 'react';

interface PageVisibilityGuardProps {
  pageKey: string;
  children: React.ReactNode;
  redirectTo?: string;
}

// Sistema de detec√ß√£o de loops de redirecionamento
const redirectHistory: string[] = [];
const MAX_REDIRECTS = 3;
const REDIRECT_RESET_TIME = 5000; // 5 segundos

const addToRedirectHistory = (path: string) => {
  redirectHistory.push(path);
  if (redirectHistory.length > MAX_REDIRECTS) {
    redirectHistory.shift();
  }
  
  // Reset do hist√≥rico ap√≥s um tempo
  setTimeout(() => {
    redirectHistory.length = 0;
  }, REDIRECT_RESET_TIME);
};

const isInRedirectLoop = (targetPath: string) => {
  const recentRedirects = redirectHistory.filter(path => path === targetPath);
  return recentRedirects.length >= MAX_REDIRECTS;
};

const PageVisibilityGuard = ({ 
  pageKey, 
  children, 
  redirectTo = '/' 
}: PageVisibilityGuardProps) => {
  const { isPageVisible, loading, error } = usePageVisibility();
  const { user } = useAuth();
  const { canAccessAdmin, isLoading: permissionsLoading } = usePermissions();
  const location = useLocation();
  const [hasTimeout, setHasTimeout] = useState(false);
  const [loadingStartTime] = useState(Date.now());

  // Timeout para situa√ß√µes de carregamento excessivo
  useEffect(() => {
    const timer = setTimeout(() => {
      if (loading || permissionsLoading) {
        console.warn(`‚è∞ [PAGE GUARD] Loading timeout (10s) for "${pageKey}"`, {
          loadingTime: Date.now() - loadingStartTime,
          hasError: !!error,
          isAuthenticated: !!user,
          currentPath: location.pathname
        });
        setHasTimeout(true);
      }
    }, 10000); // 10 segundos

    return () => clearTimeout(timer);
  }, [loading, permissionsLoading, pageKey, loadingStartTime, error, user, location.pathname]);

  // Verificar se o usu√°rio √© admin real (n√£o apenas mock)
  const isRealAdmin = canAccessAdmin() && user && user.id !== 'mock_user_id';
  const isMockAdmin = user?.id === 'mock_user_id';

  console.log('üõ°Ô∏è [PageVisibilityGuard] Admin check:', {
    canAccessAdmin: canAccessAdmin(),
    userId: user?.id,
    isRealAdmin,
    isMockAdmin,
    isAdmin: isRealAdmin || isMockAdmin
  });

  // Logs detalhados para diagn√≥stico
  console.log(`üõ°Ô∏è [PAGE GUARD] Status completo para "${pageKey}":`, {
    loading,
    permissionsLoading,
    hasTimeout,
    error,
    isVisible: !loading ? isPageVisible(pageKey) : 'checking...',
    userId: user?.id,
    userEmail: user?.email,
    isRealAdmin,
    isMockAdmin,
    canAccessAdmin,
    currentPath: location.pathname,
    redirectTo,
    loadingTime: Date.now() - loadingStartTime
  });

  // Se timeout ocorreu, permitir acesso para admins ou usu√°rios autenticados como fallback de emerg√™ncia
  if (hasTimeout) {
    if (isRealAdmin || isMockAdmin) {
      console.log(`‚ö†Ô∏è [PAGE GUARD] Timeout atingido para "${pageKey}" - permitindo acesso de emerg√™ncia para admin`, {
        reason: 'timeout_emergency_access_admin',
        userId: user?.id,
        loadingTime: Date.now() - loadingStartTime
      });
      return <>{children}</>;
    } else if (user) {
      console.log(`‚ö†Ô∏è [PAGE GUARD] Timeout atingido para "${pageKey}" - permitindo acesso de emerg√™ncia para usu√°rio autenticado`, {
        reason: 'timeout_emergency_access_user',
        userId: user?.id,
        loadingTime: Date.now() - loadingStartTime
      });
      return <>{children}</>;
    } else {
      console.log(`‚ùå [PAGE GUARD] Timeout e sem autentica√ß√£o para "${pageKey}", redirecionando`);
      return <Navigate to="/entrar" replace />;
    }
  }

  // Se h√° erro e usu√°rio n√£o est√° autenticado, redirecionar para login
  if (error && !user) {
    console.log(`‚ùå [PAGE GUARD] Erro sem autentica√ß√£o para "${pageKey}", redirecionando para login`, {
      error,
      redirectTo: "/entrar"
    });
    return <Navigate to="/entrar" replace />;
  }

  // Se h√° erro mas usu√°rio est√° autenticado, negar acesso mas n√£o redirecionar para login
  if (error && user && !isRealAdmin && !isMockAdmin) {
    console.log(`‚ö†Ô∏è [PAGE GUARD] Erro no sistema para "${pageKey}" - usu√°rio autenticado mas negando acesso por seguran√ßa`, {
      error,
      userId: user?.id
    });
    return <Navigate to="/area-membro" replace />;
  }

  if (loading || permissionsLoading) {
    console.log(`‚è≥ [PAGE GUARD] Carregando dados de visibilidade para "${pageKey}"`, {
      loadingTime: Date.now() - loadingStartTime,
      loading,
      permissionsLoading
    });
    return (
      <div className="min-h-screen flex items-center justify-center bg-black">
        <div className="flex flex-col items-center gap-4">
          <Loader variant="spinner" size="lg" />
          <div className="text-center text-white">
            <p className="text-sm">Verificando permiss√µes...</p>
            <p className="text-xs text-gray-400 mt-1">
              Carregando h√° {Math.round((Date.now() - loadingStartTime) / 1000)}s
            </p>
          </div>
        </div>
      </div>
    );
  }

  // L√ìGICA PRINCIPAL: Admin sempre v√™ tudo, usu√°rio comum respeita visibilidade
  const pageIsVisible = isPageVisible(pageKey);
  
  console.log(`üîç [PAGE GUARD] Decis√£o de acesso para "${pageKey}":`, {
    pageIsVisible,
    isRealAdmin,
    isMockAdmin,
    isAuthenticated: !!user,
    willAllow: isRealAdmin || isMockAdmin || pageIsVisible,
    hasError: !!error
  });
  
  // ADMIN SEMPRE V√ä TUDO (seja admin real ou mock para testes)
  if (isRealAdmin || isMockAdmin) {
    const reason = isRealAdmin ? 'real_admin' : 'mock_admin';
    console.log(`üëë [PAGE GUARD] Acesso concedido para "${pageKey}" - motivo: ${reason}`);
    return <>{children}</>;
  }
  
  // USU√ÅRIO COMUM: S√≥ v√™ se a p√°gina estiver vis√≠vel
  if (pageIsVisible) {
    console.log(`‚úÖ [PAGE GUARD] Acesso concedido para "${pageKey}" - p√°gina vis√≠vel para usu√°rios`);
    return <>{children}</>;
  }

  // L√≥gica de redirecionamento seguro apenas se usu√°rio n√£o est√° autenticado
  if (!user) {
    console.log(`üö´ [PAGE GUARD] Usu√°rio n√£o autenticado tentando acessar "${pageKey}", redirecionando para login`);
    return <Navigate to="/entrar" replace />;
  }

  // Se usu√°rio est√° autenticado mas p√°gina n√£o est√° vis√≠vel
  const currentPath = location.pathname;
  let safeRedirectPath = redirectTo;

  // Evitar redirecionamento circular
  if (currentPath === redirectTo) {
    console.warn(`üîÑ [PAGE GUARD] Redirecionamento circular detectado: ${currentPath} -> ${redirectTo}`);
    safeRedirectPath = '/area-membro'; // Redirecionar para √°rea de membros em vez de home
  }

  // Detectar loop de redirecionamentos
  if (isInRedirectLoop(safeRedirectPath)) {
    console.error(`üö® [PAGE GUARD] Loop de redirecionamento detectado para "${safeRedirectPath}", usando rota de escape`);
    safeRedirectPath = '/area-membro'; // Rota de escape segura
  }

  // Adicionar ao hist√≥rico de redirecionamentos
  addToRedirectHistory(currentPath);

  console.log(`üö´ [PAGE GUARD] Acesso negado para "${pageKey}" (usu√°rio comum, p√°gina n√£o vis√≠vel), redirecionando ${currentPath} -> ${safeRedirectPath}`);
  return <Navigate to={safeRedirectPath} replace />;
};

export default PageVisibilityGuard;
